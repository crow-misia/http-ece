/*
 * Copyright (c) 2019 Zenichi Amano
 *
 * This file is part of http-ece, which is MIT licensed.
 * See http://opensource.org/licenses/MIT
 */

package httpece

import (
	"encoding/base64"
	"encoding/binary"
	"github.com/stretchr/testify/assert"
	"strings"
	"testing"
)

func TestUint16ToBytes(t *testing.T) {
	f := func(v ...byte) {
		assert.Equal(t, v, uint16ToBytes(binary.BigEndian.Uint16(v)))
	}

	f(0x00, 0x01)
	f(0x00, 0x11)
	f(0x01, 0x01)
}

func TestUint32ToBytes(t *testing.T) {
	f := func(v ...byte) {
		assert.Equal(t, v, uint32ToBytes(binary.BigEndian.Uint32(v)))
	}

	f(0x00, 0x00, 0x00, 0x01)
	f(0x00, 0x00, 0x00, 0x11)
	f(0x00, 0x00, 0x01, 0x01)
	f(0x00, 0x01, 0x01, 0x01)
	f(0x00, 0x11, 0x01, 0x01)
	f(0x01, 0x01, 0x01, 0x01)
}

func TestGenerateNonce(t *testing.T) {
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	tmp := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	assert.Equal(t, expect, generateNonce(tmp, 0))

	expect = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}
	assert.Equal(t, expect, generateNonce(tmp, 1))

	expect = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02}
	assert.Equal(t, expect, generateNonce(tmp, 2))

	expect = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03}
	assert.Equal(t, expect, generateNonce(tmp, 3))

	tmp = []byte{0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78}
	expect = []byte{0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0xed, 0xcb, 0xa9, 0x87}
	assert.Equal(t, expect, generateNonce(tmp, 0xffffffff))
}

func TestJoin(t *testing.T) {
	assert.Equal(t, []byte{0x01}, join([][]byte{{0x01}}))
	assert.Equal(t, []byte{0x01, 0x02}, join([][]byte{{0x01}, {0x02}}))
	assert.Equal(t, []byte{0x01, 0x02, 0x03}, join([][]byte{{0x01}, {0x02}, {0x03}}))
}

func TestRandomSalt(t *testing.T) {
	salt, err := randomSalt()
	assert.Nil(t, err)
	assert.Equal(t, 16, len(salt))

	salt2, err2 := randomSalt()
	assert.Nil(t, err2)
	assert.Equal(t, 16, len(salt2))
	assert.NotEqual(t, salt, salt2)
}

func d(text string) []byte {
	normalized := strings.NewReplacer("-", "+", "_", "/", "=", "").Replace(text)
	b, err := base64.RawStdEncoding.DecodeString(normalized)
	if err != nil {
		panic(err)
	}
	return b
}
